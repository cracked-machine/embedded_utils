name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Setup
      run: |
        sudo apt -y update
        sudo apt -y install \
          ninja-build \
          curl
        pip3 install git+https://github.com/gcovr/gcovr.git

    - name: Install libfuse-dev v3.10.5
      run: |
        pip3 uninstall pytest
        pip3 install pytest
        sudo apt -y install fuse3 meson
        cd ~
        wget -q https://github.com/libfuse/libfuse/releases/download/fuse-3.10.5/fuse-3.10.5.tar.xz
        tar -xf fuse-3.10.5.tar.xz 
        cd fuse-3.10.5
        mkdir build
        cd build
        meson ..
        ninja
        sudo python -m pytest test/
        sudo ninja install

    - name: Install Catch2 latest
      run: |
        cd ~
        git clone https://github.com/catchorg/Catch2.git
        pushd Catch2
        cmake -Bbuild -H. -DBUILD_TESTING=OFF
        sudo cmake --build build/ --target install
        popd 
        uname -a

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build \
              -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
              -DCMAKE_CXX_STANDARD=20 \
              -G Ninja

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build ${{github.workspace}}/build \
              --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        pwd
        ls -la
        ./test_suite 
   
    
    - name: Coverage
      run: |
        gcovr  -r . -e build -e '(.+)/tests/(.+)' --xml --xml-pretty -o ./coverage/coverage.xml  
        gcovr  -r . -e build -e '(.+)/tests/(.+)' --json --json-pretty -o ./coverage/coverage.json  
        ls -la ./coverage
        sudo curl -Os https://uploader.codecov.io/latest/linux/codecov
        sudo chown runner ./codecov
        sudo chmod +x codecov
        ls -la ./codecov
        ./codecov
